data.stock$ID1<-c(" ", " ", " ", " ", " ")
head(data.stock)
data.que[, c("QUESTION", "VARIABLE", "style_id", "row_rank1")]->data.stock
data.stock<-data.stock[order(data.que$row_rank1) , ]
data.stock$rowrank<-order(data.que$row_rank1)
data.que[, c("QUESTION", "VARIABLE", "style_id", "row_rank1")]->data.stock
data.stock<-data.stock[order(data.stock$row_rank1) , ]
data.stock$rowrank<-order(data.stock$row_rank1)
head(data.stock)
data.frame(t(data.stock))->data.stock
head(data.stock)
data.stock$ID2<-c(" ", " ", " ", " ", " ")
data.stock$ID1<-c(" ", " ", " ", " ", " ")
source('C:/Users/elie/Desktop/EnqueteOutils/R/que_to_tabvide.R', encoding = 'UTF-8')
library(EnqueteOutils)
library(EnqueteOutils)
EnqueteOutils::excel_to_R
EnqueteOutils::que.to.tabvide
excel_to_R(path = "C:/Users/elie/Documents/Modèles Office personnalisés/MODEL_QUESTIONNAIRE_2.dotx")->df
source('C:/Users/elie/Desktop/EnqueteOutils/R/excel_to_R.R', encoding = 'UTF-8')
excel_to_R(path = "C:/Users/elie/Documents/Modèles Office personnalisés/MODEL_QUESTIONNAIRE_2.dotx")->df
data=df$df.QR
SPHINX_ou_WORD="WORD"
data->data.que
if(SPHINX_ou_WORD=="SPHINX"){
data.que[, c("Libellé", "Variable", "rowrank")]->data.stock
data.stock$rowrank<-order(data.que$rowrank)
data.frame(t(data.stock))->data.stock
data.stock$ID2<-c(" ", " ", " ")
data.stock$ID1<-c(" ", " ", " ")
data.stock[, c(ncol(data.stock), ncol(data.stock)-1, 1:(ncol(data.stock)-2)) ]->data.stock
}
if(SPHINX_ou_WORD=="WORD"){
data.que[, c("QUESTION", "VARIABLE", "style_id", "row_rank1")]->data.stock
data.stock<-data.stock[order(data.stock$row_rank1) , ]
data.stock$rowrank<-order(data.stock$row_rank1)
data.frame(t(data.stock))->data.stock
data.stock$ID2<-c(" ", " ", " ", " ", " ")
data.stock$ID1<-c(" ", " ", " ", " ", " ")
#data.stock[, c(ncol(data.stock), ncol(data.stock)-1, 1:(ncol(data.stock)-2)) ]->data.stock
}
data.stovk
data.stock
data.que[, c("QUESTION", "VARIABLE", "style_id", "row_rank1")]->data.stock
data.stock<-data.stock[order(data.stock$row_rank1) , ]
data.stock$rowrank<-order(data.stock$row_rank1)
head(data.stovk)
head(data.stock)
library(EnqueteOutils)
library(EnqueteOutils)
library(EnqueteOutils)
excel_to_R(path = "C:/Users/elie/Documents/Modèles Office personnalisés/MODEL_QUESTIONNAIRE_2.dotx")->df
library(EnqueteOutils)
excel_to_R(path = "C:/Users/elie/Documents/Modèles Office personnalisés/MODEL_QUESTIONNAIRE_2.dotx")->df
df$df.GLOBAL
df$df.GLOBAL->mat3
grepl("autre", mat3[1 , ])
head(mat3)
grepl("autre", mat3[5 , ])
grepl("Autre", mat3[5 , ])
grepl("Autre", as.character(mat3[5 , ]))
grepl("Autre", as.character(mat3[6 , ]))
grepl("Autre", as.character(mat3[4 , ]))
grepl("Autre", as.character(mat3[3 , ]))
grepl("Autre, précisez : ……………………………………………………………", as.character(mat3[3 , ]))
grepl("Autre", paste(as.character(mat3[3 , ]), collapse="."))
paste(as.character(mat3[3 , ]), collapse=".")
as.character(mat3[3 , ])
mat3[3 , ]
paste(mat3[3 , ], collapse=".")
character
as.character(mat3[3 , ])
summary(mat3[3 , ])
as.character(mat3[3 , ])
#### IMPORT DU DOCX et des QR####
library(officer)
?read_docx
?docx_summary
library(EnqueteOutils)
?EnqueteOutils::objepan2()
library(EnqueteOutils)
?EnqueteOutils::objepan3()
library(EnqueteOutils)
?EnqueteOutils::objepan3()
library(EnqueteOutils)
?EnqueteOutils::objepan3()
library(EnqueteOutils)
library(EnqueteOutils)
library(EnqueteOutils)
library(EnqueteOutils)
library(EnqueteOutils)
fromWORD
library(EnqueteOutils)
library(EnqueteOutils)
library(EnqueteOutils)
library(EnqueteOutils)
library(EnqueteOutils)
EnqueteOutils::tidy_multiQuest
library(EnqueteOutils)
library(EnqueteOutils)
library(EnqueteOutils)
source('C:/Users/elie/Desktop/EnqueteOutils/R/RBMAT.R', encoding = 'UTF-8')
source('C:/Users/elie/Desktop/EnqueteOutils/R/RBMAT.R', encoding = 'UTF-8')
source('C:/Users/elie/Desktop/EnqueteOutils/R/RBMAT.R', encoding = 'UTF-8')
source('C:/Users/elie/Desktop/EnqueteOutils/R/RBMAT.R', encoding = 'UTF-8')
source('C:/Users/elie/Desktop/EnqueteOutils/R/RBMAT.R', encoding = 'UTF-8')
source('C:/Users/elie/Desktop/EnqueteOutils/R/RBMAT.R', encoding = 'UTF-8')
RBMAT<-function(original.df, var1, var2, prop=FALSE, prop.margin=1){
####
if(is.null(var2)){
if(length(var1)>1){
message("INFO: var1 est multiple")
message(paste("var1 : ", paste(var1, collapse = "/")))
message("var2 is null")
data.multi<-original.df[, var1]
var.multi<-var1
#
data.frame(apply(data.multi, MARGIN = 2, FUN = function(x) {as.character(x)}))->data.multi
unique(unlist(data.multi))->levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
lapply(X = 1:length(levels.multi), FUN = function(li){
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]))){
"OUI"
} else {"NON"}
}))
})->lisOUINON
names(lisOUINON)<-as.character(levels.multi)
do.call("cbind", lisOUINON)->matriOUINON1
return(matriOUINON1)
} else {
message("INFO: var1 est unique")
message(paste("var1 : ", paste(var1, collapse = "/")))
message("var2 is null")
return(table(original.df[ , var1]))
}
} else {
if(length(var1)>1&length(var2)<=1 ){
message("INFO: var1 est multiple")
message(paste("var1 : ", paste(var1, collapse = "/")))
message("INFO : var2 est unique")
message(paste("var2 : ", paste(var2, collapse = "/")))
data.multi<-original.df[, var1]
var.multi<-var1
data.unique<-original.df[, var2]
var.unique<-var2
####
data.frame(apply(data.multi, MARGIN = 2, FUN = function(x) {as.character(x)}))->data.multi
unique(unlist(data.multi))->levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
lapply(X = 1:length(levels.multi), FUN = function(li){
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]))){
"OUI"
} else {"NON"}
}))
})->lisOUINON
names(lisOUINON)<-as.character(levels.multi)
do.call("cbind", lisOUINON)->matriOUINON1
####
lapply(1:ncol(matriOUINON1) , function(xi1){
table(matriOUINON1[ , xi1] , original.df[ , var.unique])
})->listab
names(listab)<-colnames(matriOUINON1)
lapply(1:length(listab), FUN = function(xi2){
rownames(listab[[xi2]])[rownames(listab[[xi2]])=="OUI"]<-names(listab)[xi2]
#
as.data.frame.matrix(listab[[xi2]])#[rownames(listab[[xi2]])!="NON" ,  ])
})->listab.named
#library(plyr)
do.call("rbind", listab.named)->df.named
subset(df.named, row.names(df.named)%in%levels.multi)->df.named
names(df.named)[names(df.named)=="V3"]<-""
as.table(as.matrix(df.named))->rbmat
####
} else {
if(length(var2)>1&length(var1)<=1 ){ #class(data2)=="data.frame"#&ncol(data2)>1
message("INFO: var2 est multiple")
message(paste("var2 : ", paste(var2, collapse = "/")))
message("INFO : var1 est unique")
message(paste("var1 : ", paste(var1, collapse = "/")))
####
data.multi<-original.df[, var2]
var.multi<-var2
data.unique<-original.df[, var1]
var.unique<-var1
####
data.frame(apply(data.multi, MARGIN = 2, FUN = function(x) {as.character(x)}))->data.multi
unique(unlist(data.multi))->levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
lapply(X = 1:length(levels.multi), FUN = function(li){
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]))){
"OUI"
} else {"NON"}
}))
})->lisOUINON
names(lisOUINON)<-as.character(levels.multi)
do.call("cbind", lisOUINON)->matriOUINON1
####
lapply(1:ncol(matriOUINON1) , function(xi1){
table(matriOUINON1[ , xi1] , original.df[ , var.unique])
})->listab
names(listab)<-colnames(matriOUINON1)
lapply(1:length(listab), FUN = function(xi2){
rownames(listab[[xi2]])[rownames(listab[[xi2]])=="OUI"]<-names(listab)[xi2]
#
as.data.frame.matrix(listab[[xi2]])#[rownames(listab[[xi2]])!="NON" ,  ])
})->listab.named
#library(plyr)
do.call("rbind", listab.named)->df.named
subset(df.named, row.names(df.named)%in%levels.multi)->df.named
names(df.named)[names(df.named)=="V3"]<-""
as.table(as.matrix(df.named))->rbmat
# if(var.multi==var2){
#   t(rbmat)->rbmat
# }
####
} else {
if(length(var2)>1&length(var1)>1){
message("INFO: var2 est multiple")
message(paste("var2 : ", paste(var2, collapse = "/")))
message("INFO : var2 est unique")
message(paste("var2 : ", paste(var2, collapse = "/")))
####
data.multi<-original.df[, var1]
var.multi<-var1
data.multi2<-original.df[, var2]
var.multi2<-var2
####
data.frame(apply(data.multi, MARGIN = 2, FUN = function(x) {as.character(x)}))->data.multi
unique(unlist(data.multi))->levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
lapply(X = 1:length(levels.multi), FUN = function(li){
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]))){
"OUI"
} else {"NON"}
}))
})->lisOUINON
names(lisOUINON)<-as.character(levels.multi)
do.call("cbind", lisOUINON)->matriOUINON1
####
data.frame(apply(data.multi2, MARGIN = 2, FUN = function(x) {as.character(x)}))->data.multi2
unique(unlist(data.multi2))->levels.multi2
as.character(levels.multi2)[order(as.character(levels.multi2))]->levels.multi2
lapply(X = 1:length(levels.multi2), FUN = function(li){
unlist(lapply(1:nrow(data.multi2), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi2[li], x = unlist(data.multi2[rowi , ]))){
"OUI"
} else {"NON"}
}))
})->lisOUINON2
names(lisOUINON2)<-as.character(levels.multi2)
do.call("cbind", lisOUINON2)->matriOUINON2
####
lapply(1:ncol(matriOUINON1),FUN = function(xi1){
lapply(1:ncol(matriOUINON2),FUN = function(xi2){
table(matriOUINON1[ , xi1], matriOUINON2[ , xi2])->tab1.x12
as.matrix(tab1.x12)->matx
rownames(matx)[rownames(matx)=="OUI"]<-colnames(matriOUINON1)[xi1]
colnames(matx)[colnames(matx)=="OUI"]<-colnames(matriOUINON2)[xi2]
matx
#matx[rownames(matx)!="NON"&rownames(matx)!=""&!is.na(rownames(matx)) , ]->matx
})->listab2
names(listab2)<-colnames(matriOUINON2)
listab2
}) -> listab
names(listab)<-colnames(matriOUINON1)
level.for.row<-as.character(levels.multi)[as.character(levels.multi)!=""&!is.na(as.character(levels.multi))]
level.for.col<-as.character(levels.multi2)[as.character(levels.multi2)!=""&!is.na(as.character(levels.multi2))]
matrix(nrow = length(level.for.row),ncol = length(as.character(level.for.col)) )->abc
data.frame(abc)->abc
row.names(abc)<-level.for.row
names(abc)<-level.for.col
for(xj1 in 1:length(listab)){
for(xj2 in 1:length(listab[[xj1]])){
data.frame(listab[[xj1]][[xj2]])->temp.df
temp.df[temp.df$Var1%in%row.names(abc)&temp.df$Var2%in%names(abc) , ]->subs.df
abc[row.names(abc)==subs.df$Var1 , names(abc)==subs.df$Var2 ]<-subs.df$Freq
}
}
as.table(as.matrix(abc))->rbmat
####
} else {
if(length(var2)<=1&length(var1)<=1){
message("INFO: var2 est unique")
message(paste("var2 : ", paste(var2, collapse = "/")))
message("INFO : var1 est unique")
message(paste("var1 : ", paste(var1, collapse = "/")))
####
table(original.df[ , var1], original.df[ , var2])->rbmat
}}}}
if(prop==TRUE){
rbmat<-round(prop.table(rbmat, margin = prop.margin)*100, 1)
if(prop.margin==1){
cbind(rbmat, rowSums(rbmat))->rbmat
colnames(rbmat)[dim(rbmat)[2]]<-"TOTAL"
} else {
if(prop.margin==2){
rbind(rbmat, colSums(rbmat))->rbmat
rownames(rbmat)[dim(rbmat)[1]]<-"TOTAL"
}
}
#addmargins.TOTAL(tab12, margin = c(2, 1)[prop.margin])->tab12
} else {
cbind(rbmat, rowSums(rbmat))->rbmat
colnames(rbmat)[dim(rbmat)[2]]<-"TOTAL"
rbind(rbmat, colSums(rbmat))->rbmat
rownames(rbmat)[dim(rbmat)[1]]<-"TOTAL"
#addmargins.TOTAL(tab12)->tab12
}
#as.data.frame.matrix(tab12)->rbmat
colnames(rbmat)[colnames(rbmat)==""]<-"Sans réponse"
colnames(rbmat)[colnames(rbmat)=="V3"]<-"Sans réponse"
colnames(rbmat)[colnames(rbmat)=="V1"]<-"Sans réponse"
rbmat->rbmat2
return(rbmat2)
}
}
tabtabi$x<-as.character(tabtabi$x)
tabtab
tabtab
as.tanle(tabtab[[1]])
as.table(tabtab[[1]])
load(file="//192.168.1.5/Documents utilisateurs/Documents de Elie/SLEA/ENQUETE_SLEA/DATAS.RData")
var1 =names(tosave$DATA)[ grepl(pattern = "scol_moment", x = names(tosave$DATA))]
var1
original.df<-tosave$DATA
data.multi<-original.df[, var1]
head(data.multi)
var.multi<-var1
#
data.frame(apply(data.multi, MARGIN = 2, FUN = function(x) {as.character(x)}))->data.multi
unique(unlist(data.multi))->levels.multi
levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
levels.multi
lapply(X = 1:length(levels.multi), FUN = function(li){
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]))){
"OUI"
} else {"NON"}
}))
})->lisOUINON
lisOUINON
names(lisOUINON)<-as.character(levels.multi)
lisOUINON
levels.multi
data.multi$scol_moment
table(data.multi$scol_moment)
levels.multi
li<-4
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]))){
"OUI"
} else {"NON"}
}))
levels.multi[li]
class(levels.multi[li])
table(data.multi$scol_moment)
grepl(pattern = levels.multi[li], x = data.multi$scol_moment)
levels.multi[li]
class(data.multi$scol_moment)
#
data.frame(apply(data.multi, MARGIN = 2, FUN = function(x) {as.character(x)}), stringsAsFactors = FALSE)->data.multi
unique(unlist(data.multi))->levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
lapply(X = 1:length(levels.multi), FUN = function(li){
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]))){
"OUI"
} else {"NON"}
}))
})->lisOUINON
names(lisOUINON)<-as.character(levels.multi)
lisOUINON
class(data.multi$scol_moment)
table(data.multi$scol_moment)
unique(unlist(data.multi))->levels.multi
table(data.multi$scol_moment)
levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
levels.multi
levels.multi[li]
rowi<-1
unlist(data.multi[rowi , ])
grepl("", unlist(data.multi[rowi , ]))
grepl("non/dé-scolarisé", unlist(data.multi[rowi , ]))
data.multi
data.multi$scol_moment
rowi<-142
unlist(data.multi[rowi , ])
grepl(levels.multi[li], unlist(data.multi[rowi , ]))
levels.multi[li]
Encoding(levels.multi[li])
Encoding(unlist(data.multi[rowi , ]))
levels.multi[li]
Encoding(levels.multi[li])
unlist(data.multi[rowi , ])
unlist(data.multi[rowi , ])[1]
levels.multi[li]
Encoding(levels.multi[li])
unlist(data.multi[rowi , ])[1]
Encoding(unlist(data.multi[rowi , ])[1])
unlist(data.multi[rowi , ])[1]==levels.multi[li]
grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ])[1])
grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ])[1], fixed = TRUE)
source('C:/Users/elie/Desktop/EnqueteOutils/R/RBMAT.R', encoding = 'UTF-8')
RBMAT(original.df = tosave$DATA, var1 =names(tosave$DATA)[ grepl(pattern = "scol_moment", x = names(tosave$DATA))], var2 = NULL, prop = TRUE)->test
test
library(EnqueteOutils)
load(file="//192.168.1.5/Documents utilisateurs/Documents de Elie/SLEA/ENQUETE_SLEA/DATAS.RData")
library(EnqueteOutils)
RBMAT(original.df = tosave$DATA, var1 =names(tosave$DATA)[ grepl(pattern = "scol_moment", x = names(tosave$DATA))], var2 = NULL, prop = TRUE)->test
test
RBMAT(original.df = tosave$DATA, var1 =names(tosave$DATA)[ grepl(pattern = "scol_moment", x = names(tosave$DATA))], var2 = NULL, prop = FALSE)->test
test
library(EnqueteOutils)
RBMAT(original.df = tosave$DATA, var1 =names(tosave$DATA)[ grepl(pattern = "scol_moment", x = names(tosave$DATA))], var2 = NULL, prop = FALSE)->test
test
class(test)
RBMAT(original.df = tosave$DATA, var1 =names(tosave$DATA)[ grepl(pattern = "scol_moment", x = names(tosave$DATA))], var2 = NULL, prop = TRUE)->test
class(test)
test
source('C:/Users/elie/Desktop/EnqueteOutils/R/RBMAT.R', encoding = 'UTF-8')
library(EnqueteOutils)
rm(RBMAT)
library(EnqueteOutils)
library(EnqueteOutils)
load(file="//192.168.1.5/Documents utilisateurs/Documents de Elie/SLEA/ENQUETE_SLEA/DATAS.RData")
original.df=subset(tosave$DATA,tosave$DATA$RENCONTRE_LOG=="oui"),  var1=names(tosave$DATA)[grepl(pattern = "sentiment_parent", x = names(tosave$DATA))],
+           var2=names(tosave$DATA)[grepl(pattern = "nature_mesure", x = names(tosave$DATA))]
original.df=subset(tosave$DATA,tosave$DATA$RENCONTRE_LOG=="oui");  var1=names(tosave$DATA)[grepl(pattern = "sentiment_parent", x = names(tosave$DATA))];
var2=names(tosave$DATA)[grepl(pattern = "nature_mesure", x = names(tosave$DATA))]
message("INFO: var1 est multiple")
message(paste("var1 : ", paste(var1, collapse = "/")))
message("var2 is null")
data.multi<-original.df[, var1]
var.multi<-var1
#
data.frame(apply(data.multi, MARGIN = 2, FUN = function(x) {as.character(x)}),
stringsAsFactors = FALSE)->data.multi
unique(unlist(data.multi))->levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
lapply(X = 1:length(levels.multi), FUN = function(li){
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]), fixed = TRUE)){
"OUI"
} else {"NON"}
}))
})->lisOUINON
unique(unlist(data.multi))->levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
lapply(X = 1:length(levels.multi), FUN = function(li){
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]), fixed = TRUE)){
"OUI"
} else {"NON"}
}))
})->lisOUINON
levels.multi[li]
levels.multi
data.multi
data.multi<-original.df[, var1]
var.multi<-var1
#
data.frame(apply(data.multi, MARGIN = 2, FUN = function(x) {as.character(x)}),
stringsAsFactors = FALSE)->data.multi
data.multi
data.multi<-original.df[, var1]
data.multi
original.df<-tosave$DATA
data.multi<-original.df[, var1]
var.multi<-var1
#
data.frame(apply(data.multi, MARGIN = 2, FUN = function(x) {as.character(x)}),
stringsAsFactors = FALSE)->data.multi
unique(unlist(data.multi))->levels.multi
as.character(levels.multi)[order(as.character(levels.multi))]->levels.multi
lapply(X = 1:length(levels.multi), FUN = function(li){
unlist(lapply(1:nrow(data.multi), FUN = function(rowi){
if(TRUE%in%grepl(pattern = levels.multi[li], x = unlist(data.multi[rowi , ]), fixed = TRUE)){
"OUI"
} else {"NON"}
}))
})->lisOUINON
names(lisOUINON)<-as.character(levels.multi)
do.call("cbind", lisOUINON)->matriOUINON1
matriOUINON1
colnames()
colnames(matriOUINON1)
matriOUINON1[ , colnames(matriOUINON1)!=""]
source('C:/Users/elie/Desktop/EnqueteOutils/R/RBMAT.R', encoding = 'UTF-8')
library(EnqueteOutils)
library(EnqueteOutils)
EnqueteOutils::sphinx_to_R(csv.file = "FNDSA_21_VERSION_LONGUE_structure.csv")
library(EnqueteOutils)
EnqueteOutils::sphinx_to_R(csv.file = "FNDSA_21_VERSION_LONGUE_structure.csv")
source('C:/Users/elie/Desktop/EnqueteOutils/R/sphinx_to_R.R', encoding = 'UTF-8')
sphinx_to_R(csv.file = "FNDSA_21_VERSION_LONGUE_structure.csv")
source('C:/Users/elie/Desktop/EnqueteOutils/R/sphinx_to_R.R', encoding = 'UTF-8')
sphinx_to_R(csv.file = "FNDSA_21_VERSION_LONGUE_structure.csv")
source('C:/Users/elie/Desktop/EnqueteOutils/R/sphinx_to_R.R', encoding = 'UTF-8')
sphinx_to_R(csv.file = "FNDSA_21_VERSION_LONGUE_structure.csv")
source('C:/Users/elie/Desktop/EnqueteOutils/R/sphinx_to_R.R', encoding = 'UTF-8')
sphinx_to_R(csv.file = "FNDSA_21_VERSION_LONGUE_structure.csv")
source('C:/Users/elie/Desktop/EnqueteOutils/R/sphinx_to_R.R', encoding = 'UTF-8')
sphinx_to_R(csv.file = "FNDSA_21_VERSION_LONGUE_structure.csv")
sread.csv(file =  "FNDSA_21_VERSION_LONGUE_structure.csv", header=FALSE ,encoding="UTF-8" )
read.csv(file =  "FNDSA_21_VERSION_LONGUE_structure.csv", header=FALSE ,encoding="UTF-8" )
library(EnqueteOutils)
